// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package dlt645

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// CBRC is a C of type BRC.
	CBRC C = 8 // 广播校时
	// CRD is a C of type RD.
	CRD C = 17 // 读数据
	// CRDM is a C of type RDM.
	CRDM C = 18 // 读后续数据
	// CRDA is a C of type RDA.
	CRDA C = 19 // 读通信地址
	// CWR is a C of type WR.
	CWR C = 20 // 写数据
	// CWRA is a C of type WRA.
	CWRA C = 21 // 写通信地址
	// CDJ is a C of type DJ.
	CDJ C = 22 // 冻结命令
	// CBR is a C of type BR.
	CBR C = 23 // 更改通信速率
	// CPD is a C of type PD.
	CPD C = 24 // 修改密码
	// CXL is a C of type XL.
	CXL C = 25 // 最大需量清零
	// CDB is a C of type DB.
	CDB C = 26 // 电表清零
	// CMSG is a C of type MSG.
	CMSG C = 27 // 事件清零
	// CRR is a C of type RR.
	CRR C = 255 // 重读数据
)

const (
	// DICTotalActiveEnergy is a DIC of type TotalActiveEnergy.
	// 电能量数据标识
	DICTotalActiveEnergy DIC = 0 // 组合有功总电能
	// DICPositiveTotalActiveEnergy is a DIC of type PositiveTotalActiveEnergy.
	DICPositiveTotalActiveEnergy DIC = 65536 // 正向有功总电能
	// DICNegativeTotalActiveEnergy is a DIC of type NegativeTotalActiveEnergy.
	DICNegativeTotalActiveEnergy DIC = 131072 // 反向有功总电能
	// DICTotalReactiveEnergy1 is a DIC of type TotalReactiveEnergy1.
	DICTotalReactiveEnergy1 DIC = 196608 // 组合无功1总电能
	// DICTotalReactiveEnergy2 is a DIC of type TotalReactiveEnergy2.
	DICTotalReactiveEnergy2 DIC = 262144 // 组合无功2总电能
	// DICFirstQuadrantReactiveEnergy is a DIC of type FirstQuadrantReactiveEnergy.
	DICFirstQuadrantReactiveEnergy DIC = 327680 // 第一象限无功电能
	// DICSecondQuadrantReactiveEnergy is a DIC of type SecondQuadrantReactiveEnergy.
	DICSecondQuadrantReactiveEnergy DIC = 393216 // 第二象限无功电能
	// DICThirdQuadrantReactiveEnergy is a DIC of type ThirdQuadrantReactiveEnergy.
	DICThirdQuadrantReactiveEnergy DIC = 458752 // 第三象限无功电能
	// DICFourthQuadrantReactiveEnergy is a DIC of type FourthQuadrantReactiveEnergy.
	DICFourthQuadrantReactiveEnergy DIC = 524288 // 第四象限无功电能
	// DICPositiveTotalApparentEnergy is a DIC of type PositiveTotalApparentEnergy.
	DICPositiveTotalApparentEnergy DIC = 589824 // 正向视在总电能
	// DICNegativeTotalApparentEnergy is a DIC of type NegativeTotalApparentEnergy.
	DICNegativeTotalApparentEnergy DIC = 655360 // 反向视在总电能
	// DICAssociatedTotalElectricEnergy is a DIC of type AssociatedTotalElectricEnergy.
	DICAssociatedTotalElectricEnergy DIC = 8388608 // 关联总电能
	// DICPhaseAVoltage is a DIC of type PhaseAVoltage.
	// 变量数据标识
	DICPhaseAVoltage DIC = 33620224 // A相电压
	// DICPhaseBVoltage is a DIC of type PhaseBVoltage.
	DICPhaseBVoltage DIC = 33620480 // B相电压
	// DICPhaseCVoltage is a DIC of type PhaseCVoltage.
	DICPhaseCVoltage DIC = 33620736 // C相电压
	// DICVoltage is a DIC of type Voltage.
	DICVoltage DIC = 33685248 // 电压数据块
	// DICPhaseACurrent is a DIC of type PhaseACurrent.
	DICPhaseACurrent DIC = 33685760 // A相电流
	// DICPhaseBCurrent is a DIC of type PhaseBCurrent.
	DICPhaseBCurrent DIC = 33686016 // B相电流
	// DICPhaseCCurrent is a DIC of type PhaseCCurrent.
	DICPhaseCCurrent DIC = 33686272 // C相电流
	// DICCurrent is a DIC of type Current.
	DICCurrent DIC = 33750784 // 电流数据块
	// DICTotalActivePower is a DIC of type TotalActivePower.
	DICTotalActivePower DIC = 33751040 // 总有功功率
	// DICPhaseAActivePower is a DIC of type PhaseAActivePower.
	DICPhaseAActivePower DIC = 33751296 // A相有功功率
	// DICPhaseBActivePower is a DIC of type PhaseBActivePower.
	DICPhaseBActivePower DIC = 33751552 // B相有功功率
	// DICPhaseCActivePower is a DIC of type PhaseCActivePower.
	DICPhaseCActivePower DIC = 33751808 // C相有功功率
	// DICActivePower is a DIC of type ActivePower.
	DICActivePower DIC = 33816320 // 有功功率数据块
	// DICTotalReactivePower is a DIC of type TotalReactivePower.
	DICTotalReactivePower DIC = 33816576 // 总无功功率
	// DICPhaseAReactivePower is a DIC of type PhaseAReactivePower.
	DICPhaseAReactivePower DIC = 33816832 // A相无功功率
	// DICPhaseBReactivePower is a DIC of type PhaseBReactivePower.
	DICPhaseBReactivePower DIC = 33817088 // B相无功功率
	// DICPhaseCReactivePower is a DIC of type PhaseCReactivePower.
	DICPhaseCReactivePower DIC = 33817344 // C相无功功率
	// DICReactivePower is a DIC of type ReactivePower.
	DICReactivePower DIC = 33881856 // 无功功率数据块
	// DICTotalApparentPower is a DIC of type TotalApparentPower.
	DICTotalApparentPower DIC = 33882112 // 总视在功率
	// DICPhaseAApparentPower is a DIC of type PhaseAApparentPower.
	DICPhaseAApparentPower DIC = 33882368 // A相视在功率
	// DICPhaseBApparentPower is a DIC of type PhaseBApparentPower.
	DICPhaseBApparentPower DIC = 33882624 // B相视在功率
	// DICPhaseCApparentPower is a DIC of type PhaseCApparentPower.
	DICPhaseCApparentPower DIC = 33882880 // C相视在功率
	// DICApparentPower is a DIC of type ApparentPower.
	DICApparentPower DIC = 33947392 // 视在功率数据块
	// DICTotalPowerFactor is a DIC of type TotalPowerFactor.
	DICTotalPowerFactor DIC = 33947648 // 总功率因素
	// DICPhaseAPowerFactor is a DIC of type PhaseAPowerFactor.
	DICPhaseAPowerFactor DIC = 33947904 // A相功率因素
	// DICPhaseBPowerFactor is a DIC of type PhaseBPowerFactor.
	DICPhaseBPowerFactor DIC = 33948160 // B相功率因素
	// DICPhaseCPowerFactor is a DIC of type PhaseCPowerFactor.
	DICPhaseCPowerFactor DIC = 33948416 // C相功率因素
	// DICPowerFactor is a DIC of type PowerFactor.
	DICPowerFactor DIC = 34012928 // 功率因素数据块
	// DICABLineVoltage is a DIC of type ABLineVoltage.
	DICABLineVoltage DIC = 34341120 // AB线电压
	// DICBCLineVoltage is a DIC of type BCLineVoltage.
	DICBCLineVoltage DIC = 34341376 // BC线电压
	// DICCALineVoltage is a DIC of type CALineVoltage.
	DICCALineVoltage DIC = 34341632 // CA线电压
	// DICLineVoltage is a DIC of type LineVoltage.
	DICLineVoltage DIC = 34406144 // 线电压数据块
	// DICFrequency is a DIC of type Frequency.
	DICFrequency DIC = 41943042 // 频率
	// DICTotalOverCurrentCount is a DIC of type TotalOverCurrentCount.
	// 事件记录数据标识
	DICTotalOverCurrentCount DIC = 51118080 // 过流总次数，总时间
	// DICTotalMeterResetCount is a DIC of type TotalMeterResetCount.
	DICTotalMeterResetCount DIC = 53477632 // 电表清零总次数
	// DICMeterResetRecord is a DIC of type MeterResetRecord.
	DICMeterResetRecord DIC = 53477633 // 电表清零记录, 这个返回的是一个对象的结构体
	// DICDateTime is a DIC of type DateTime.
	// 参变量数据标识
	DICDateTime DIC = 67109121 // 年月日星期
	// DICTime is a DIC of type Time.
	DICTime DIC = 67109122 // 时分秒
	// DICAssetManagementCode is a DIC of type AssetManagementCode.
	DICAssetManagementCode DIC = 67109891 // 资产管理编码
	// DICActiveConstant is a DIC of type ActiveConstant.
	DICActiveConstant DIC = 67109897 // 电表有功常数
	// DICReactiveConstant is a DIC of type ReactiveConstant.
	DICReactiveConstant DIC = 67109898 // 电表无功常数
)

const (
	// ErrorCodeRATE is an ErrorCode of type RATE.
	ErrorCodeRATE ErrorCode = 64 // 费率数超
	// ErrorCodeDAY is an ErrorCode of type DAY.
	ErrorCodeDAY ErrorCode = 32 // 日时段数超
	// ErrorCodeYEAR is an ErrorCode of type YEAR.
	ErrorCodeYEAR ErrorCode = 16 // 年时区数超
	// ErrorCodeBR is an ErrorCode of type BR.
	ErrorCodeBR ErrorCode = 8 // 通信速率不能更改
	// ErrorCodePD is an ErrorCode of type PD.
	ErrorCodePD ErrorCode = 4 // 密码错误/未授权
	// ErrorCodeDATA is an ErrorCode of type DATA.
	ErrorCodeDATA ErrorCode = 2 // 无请求数据
	// ErrorCodeOTHER is an ErrorCode of type OTHER.
	ErrorCodeOTHER ErrorCode = 1 // 其他错误
)

const (
	// PV1997 is a P of type V1997.
	PV1997 P = iota
	// PV2007 is a P of type V2007.
	PV2007
)

const (
	// StateUnknown is a State of type Unknown.
	StateUnknown State = iota
	// StateConnecting is a State of type Connecting.
	StateConnecting
	// StateConnected is a State of type Connected.
	StateConnected
	// StateDisconnected is a State of type Disconnected.
	StateDisconnected
	// StateConnectClosed is a State of type ConnectClosed.
	StateConnectClosed
)

var ErrInvalidC = errors.New("not a valid C")

var _CName = "BRCRDRDMRDAWRWRADJBRPDXLDBMSGRR"

var _CMapName = map[C]string{
	CBRC: _CName[0:3],
	CRD:  _CName[3:5],
	CRDM: _CName[5:8],
	CRDA: _CName[8:11],
	CWR:  _CName[11:13],
	CWRA: _CName[13:16],
	CDJ:  _CName[16:18],
	CBR:  _CName[18:20],
	CPD:  _CName[20:22],
	CXL:  _CName[22:24],
	CDB:  _CName[24:26],
	CMSG: _CName[26:29],
	CRR:  _CName[29:31],
}

// Name is the attribute of C.
func (x C) Name() string {
	if v, ok := _CMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("C(%d).Name", x)
}

var _CMapOld = map[C]uint8{
	CBRC: 8,
	CRD:  1,
	CRDM: 2,
	CRDA: 255,
	CWR:  4,
	CWRA: 10,
	CDJ:  255,
	CBR:  12,
	CPD:  15,
	CXL:  16,
	CDB:  255,
	CMSG: 255,
	CRR:  3,
}

// Old is the attribute of C.
func (x C) Old() uint8 {
	if v, ok := _CMapOld[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of C.
func (x C) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x C) IsValid() bool {
	_, ok := _CMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x C) String() string {
	return x.Name()
}

var _CNameMap = map[string]C{
	_CName[0:3]:   CBRC,
	_CName[3:5]:   CRD,
	_CName[5:8]:   CRDM,
	_CName[8:11]:  CRDA,
	_CName[11:13]: CWR,
	_CName[13:16]: CWRA,
	_CName[16:18]: CDJ,
	_CName[18:20]: CBR,
	_CName[20:22]: CPD,
	_CName[22:24]: CXL,
	_CName[24:26]: CDB,
	_CName[26:29]: CMSG,
	_CName[29:31]: CRR,
}

// ParseC converts a string to a C.
func ParseC(value string) (C, error) {
	if x, ok := _CNameMap[value]; ok {
		return x, nil
	}
	return C(0), fmt.Errorf("%s is %w", value, ErrInvalidC)
}

var ErrInvalidDIC = errors.New("not a valid DIC")

var _DICName = "TotalActiveEnergyPositiveTotalActiveEnergyNegativeTotalActiveEnergyTotalReactiveEnergy1TotalReactiveEnergy2FirstQuadrantReactiveEnergySecondQuadrantReactiveEnergyThirdQuadrantReactiveEnergyFourthQuadrantReactiveEnergyPositiveTotalApparentEnergyNegativeTotalApparentEnergyAssociatedTotalElectricEnergyPhaseAVoltagePhaseBVoltagePhaseCVoltageVoltagePhaseACurrentPhaseBCurrentPhaseCCurrentCurrentTotalActivePowerPhaseAActivePowerPhaseBActivePowerPhaseCActivePowerActivePowerTotalReactivePowerPhaseAReactivePowerPhaseBReactivePowerPhaseCReactivePowerReactivePowerTotalApparentPowerPhaseAApparentPowerPhaseBApparentPowerPhaseCApparentPowerApparentPowerTotalPowerFactorPhaseAPowerFactorPhaseBPowerFactorPhaseCPowerFactorPowerFactorABLineVoltageBCLineVoltageCALineVoltageLineVoltageFrequencyTotalOverCurrentCountTotalMeterResetCountMeterResetRecordDateTimeTimeAssetManagementCodeActiveConstantReactiveConstant"

var _DICMapName = map[DIC]string{
	DICTotalActiveEnergy:             _DICName[0:17],
	DICPositiveTotalActiveEnergy:     _DICName[17:42],
	DICNegativeTotalActiveEnergy:     _DICName[42:67],
	DICTotalReactiveEnergy1:          _DICName[67:87],
	DICTotalReactiveEnergy2:          _DICName[87:107],
	DICFirstQuadrantReactiveEnergy:   _DICName[107:134],
	DICSecondQuadrantReactiveEnergy:  _DICName[134:162],
	DICThirdQuadrantReactiveEnergy:   _DICName[162:189],
	DICFourthQuadrantReactiveEnergy:  _DICName[189:217],
	DICPositiveTotalApparentEnergy:   _DICName[217:244],
	DICNegativeTotalApparentEnergy:   _DICName[244:271],
	DICAssociatedTotalElectricEnergy: _DICName[271:300],
	DICPhaseAVoltage:                 _DICName[300:313],
	DICPhaseBVoltage:                 _DICName[313:326],
	DICPhaseCVoltage:                 _DICName[326:339],
	DICVoltage:                       _DICName[339:346],
	DICPhaseACurrent:                 _DICName[346:359],
	DICPhaseBCurrent:                 _DICName[359:372],
	DICPhaseCCurrent:                 _DICName[372:385],
	DICCurrent:                       _DICName[385:392],
	DICTotalActivePower:              _DICName[392:408],
	DICPhaseAActivePower:             _DICName[408:425],
	DICPhaseBActivePower:             _DICName[425:442],
	DICPhaseCActivePower:             _DICName[442:459],
	DICActivePower:                   _DICName[459:470],
	DICTotalReactivePower:            _DICName[470:488],
	DICPhaseAReactivePower:           _DICName[488:507],
	DICPhaseBReactivePower:           _DICName[507:526],
	DICPhaseCReactivePower:           _DICName[526:545],
	DICReactivePower:                 _DICName[545:558],
	DICTotalApparentPower:            _DICName[558:576],
	DICPhaseAApparentPower:           _DICName[576:595],
	DICPhaseBApparentPower:           _DICName[595:614],
	DICPhaseCApparentPower:           _DICName[614:633],
	DICApparentPower:                 _DICName[633:646],
	DICTotalPowerFactor:              _DICName[646:662],
	DICPhaseAPowerFactor:             _DICName[662:679],
	DICPhaseBPowerFactor:             _DICName[679:696],
	DICPhaseCPowerFactor:             _DICName[696:713],
	DICPowerFactor:                   _DICName[713:724],
	DICABLineVoltage:                 _DICName[724:737],
	DICBCLineVoltage:                 _DICName[737:750],
	DICCALineVoltage:                 _DICName[750:763],
	DICLineVoltage:                   _DICName[763:774],
	DICFrequency:                     _DICName[774:783],
	DICTotalOverCurrentCount:         _DICName[783:804],
	DICTotalMeterResetCount:          _DICName[804:824],
	DICMeterResetRecord:              _DICName[824:840],
	DICDateTime:                      _DICName[840:848],
	DICTime:                          _DICName[848:852],
	DICAssetManagementCode:           _DICName[852:871],
	DICActiveConstant:                _DICName[871:885],
	DICReactiveConstant:              _DICName[885:901],
}

// Name is the attribute of DIC.
func (x DIC) Name() string {
	if v, ok := _DICMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).Name", x)
}

var _DICMapOld = map[DIC]uint16{
	DICTotalActiveEnergy:             65535,
	DICPositiveTotalActiveEnergy:     65535,
	DICNegativeTotalActiveEnergy:     65535,
	DICTotalReactiveEnergy1:          65535,
	DICTotalReactiveEnergy2:          65535,
	DICFirstQuadrantReactiveEnergy:   65535,
	DICSecondQuadrantReactiveEnergy:  65535,
	DICThirdQuadrantReactiveEnergy:   65535,
	DICFourthQuadrantReactiveEnergy:  65535,
	DICPositiveTotalApparentEnergy:   65535,
	DICNegativeTotalApparentEnergy:   65535,
	DICAssociatedTotalElectricEnergy: 65535,
	DICPhaseAVoltage:                 46609,
	DICPhaseBVoltage:                 46610,
	DICPhaseCVoltage:                 46611,
	DICVoltage:                       65535,
	DICPhaseACurrent:                 46625,
	DICPhaseBCurrent:                 46626,
	DICPhaseCCurrent:                 46627,
	DICCurrent:                       65535,
	DICTotalActivePower:              46640,
	DICPhaseAActivePower:             46641,
	DICPhaseBActivePower:             46642,
	DICPhaseCActivePower:             46643,
	DICActivePower:                   65535,
	DICTotalReactivePower:            46656,
	DICPhaseAReactivePower:           46657,
	DICPhaseBReactivePower:           46658,
	DICPhaseCReactivePower:           46659,
	DICReactivePower:                 65535,
	DICTotalApparentPower:            46688,
	DICPhaseAApparentPower:           46689,
	DICPhaseBApparentPower:           46690,
	DICPhaseCApparentPower:           46691,
	DICApparentPower:                 65535,
	DICTotalPowerFactor:              65535,
	DICPhaseAPowerFactor:             65535,
	DICPhaseBPowerFactor:             65535,
	DICPhaseCPowerFactor:             65535,
	DICPowerFactor:                   65535,
	DICABLineVoltage:                 46737,
	DICBCLineVoltage:                 46738,
	DICCALineVoltage:                 46739,
	DICLineVoltage:                   65535,
	DICFrequency:                     65535,
	DICTotalOverCurrentCount:         65535,
	DICTotalMeterResetCount:          65535,
	DICMeterResetRecord:              65535,
	DICDateTime:                      65535,
	DICTime:                          65535,
	DICAssetManagementCode:           65535,
	DICActiveConstant:                65535,
	DICReactiveConstant:              65535,
}

// Old is the attribute of DIC.
func (x DIC) Old() uint16 {
	if v, ok := _DICMapOld[x]; ok {
		return v
	}
	return 0
}

var _DICMapOldFormat = map[DIC]string{
	DICTotalActiveEnergy:             "",
	DICPositiveTotalActiveEnergy:     "",
	DICNegativeTotalActiveEnergy:     "",
	DICTotalReactiveEnergy1:          "",
	DICTotalReactiveEnergy2:          "",
	DICFirstQuadrantReactiveEnergy:   "",
	DICSecondQuadrantReactiveEnergy:  "",
	DICThirdQuadrantReactiveEnergy:   "",
	DICFourthQuadrantReactiveEnergy:  "",
	DICPositiveTotalApparentEnergy:   "",
	DICNegativeTotalApparentEnergy:   "",
	DICAssociatedTotalElectricEnergy: "",
	DICPhaseAVoltage:                 "XXX",
	DICPhaseBVoltage:                 "XXX",
	DICPhaseCVoltage:                 "XXX",
	DICVoltage:                       "",
	DICPhaseACurrent:                 "XX.XX",
	DICPhaseBCurrent:                 "XX.XX",
	DICPhaseCCurrent:                 "XX.XX",
	DICCurrent:                       "",
	DICTotalActivePower:              "XX.XXXX",
	DICPhaseAActivePower:             "XX.XXXX",
	DICPhaseBActivePower:             "XX.XXXX",
	DICPhaseCActivePower:             "XX.XXXX",
	DICActivePower:                   "",
	DICTotalReactivePower:            "",
	DICPhaseAReactivePower:           "",
	DICPhaseBReactivePower:           "",
	DICPhaseCReactivePower:           "",
	DICReactivePower:                 "",
	DICTotalApparentPower:            "",
	DICPhaseAApparentPower:           "",
	DICPhaseBApparentPower:           "",
	DICPhaseCApparentPower:           "",
	DICApparentPower:                 "",
	DICTotalPowerFactor:              "",
	DICPhaseAPowerFactor:             "",
	DICPhaseBPowerFactor:             "",
	DICPhaseCPowerFactor:             "",
	DICPowerFactor:                   "",
	DICABLineVoltage:                 "XXX",
	DICBCLineVoltage:                 "XXX",
	DICCALineVoltage:                 "XXX",
	DICLineVoltage:                   "",
	DICFrequency:                     "",
	DICTotalOverCurrentCount:         "",
	DICTotalMeterResetCount:          "",
	DICMeterResetRecord:              "",
	DICDateTime:                      "",
	DICTime:                          "",
	DICAssetManagementCode:           "",
	DICActiveConstant:                "",
	DICReactiveConstant:              "",
}

// OldFormat is the attribute of DIC.
func (x DIC) OldFormat() string {
	if v, ok := _DICMapOldFormat[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).OldFormat", x)
}

var _DICMapOldSize = map[DIC]int{
	DICTotalActiveEnergy:             0,
	DICPositiveTotalActiveEnergy:     0,
	DICNegativeTotalActiveEnergy:     0,
	DICTotalReactiveEnergy1:          0,
	DICTotalReactiveEnergy2:          0,
	DICFirstQuadrantReactiveEnergy:   0,
	DICSecondQuadrantReactiveEnergy:  0,
	DICThirdQuadrantReactiveEnergy:   0,
	DICFourthQuadrantReactiveEnergy:  0,
	DICPositiveTotalApparentEnergy:   0,
	DICNegativeTotalApparentEnergy:   0,
	DICAssociatedTotalElectricEnergy: 0,
	DICPhaseAVoltage:                 2,
	DICPhaseBVoltage:                 2,
	DICPhaseCVoltage:                 2,
	DICVoltage:                       0,
	DICPhaseACurrent:                 2,
	DICPhaseBCurrent:                 2,
	DICPhaseCCurrent:                 2,
	DICCurrent:                       0,
	DICTotalActivePower:              3,
	DICPhaseAActivePower:             3,
	DICPhaseBActivePower:             3,
	DICPhaseCActivePower:             3,
	DICActivePower:                   0,
	DICTotalReactivePower:            0,
	DICPhaseAReactivePower:           0,
	DICPhaseBReactivePower:           0,
	DICPhaseCReactivePower:           0,
	DICReactivePower:                 0,
	DICTotalApparentPower:            0,
	DICPhaseAApparentPower:           0,
	DICPhaseBApparentPower:           0,
	DICPhaseCApparentPower:           0,
	DICApparentPower:                 0,
	DICTotalPowerFactor:              0,
	DICPhaseAPowerFactor:             0,
	DICPhaseBPowerFactor:             0,
	DICPhaseCPowerFactor:             0,
	DICPowerFactor:                   0,
	DICABLineVoltage:                 2,
	DICBCLineVoltage:                 2,
	DICCALineVoltage:                 2,
	DICLineVoltage:                   0,
	DICFrequency:                     0,
	DICTotalOverCurrentCount:         0,
	DICTotalMeterResetCount:          0,
	DICMeterResetRecord:              0,
	DICDateTime:                      0,
	DICTime:                          0,
	DICAssetManagementCode:           0,
	DICActiveConstant:                0,
	DICReactiveConstant:              0,
}

// OldSize is the attribute of DIC.
func (x DIC) OldSize() int {
	if v, ok := _DICMapOldSize[x]; ok {
		return v
	}
	return 0
}

var _DICMapNewFormat = map[DIC]string{
	DICTotalActiveEnergy:             "XXXXXX.XX",
	DICPositiveTotalActiveEnergy:     "XXXXXX.XX",
	DICNegativeTotalActiveEnergy:     "XXXXXX.XX",
	DICTotalReactiveEnergy1:          "XXXXXX.XX",
	DICTotalReactiveEnergy2:          "XXXXXX.XX",
	DICFirstQuadrantReactiveEnergy:   "XXXXXX.XX",
	DICSecondQuadrantReactiveEnergy:  "XXXXXX.XX",
	DICThirdQuadrantReactiveEnergy:   "XXXXXX.XX",
	DICFourthQuadrantReactiveEnergy:  "XXXXXX.XX",
	DICPositiveTotalApparentEnergy:   "XXXXXX.XX",
	DICNegativeTotalApparentEnergy:   "XXXXXX.XX",
	DICAssociatedTotalElectricEnergy: "XXXXXX.XX",
	DICPhaseAVoltage:                 "XXX.X",
	DICPhaseBVoltage:                 "XXX.X",
	DICPhaseCVoltage:                 "XXX.X",
	DICVoltage:                       "XXX.X",
	DICPhaseACurrent:                 "XXX.XXX",
	DICPhaseBCurrent:                 "XXX.XXX",
	DICPhaseCCurrent:                 "XXX.XXX",
	DICCurrent:                       "XXX.XXX",
	DICTotalActivePower:              "XX.XXXX",
	DICPhaseAActivePower:             "XX.XXXX",
	DICPhaseBActivePower:             "XX.XXXX",
	DICPhaseCActivePower:             "XX.XXXX",
	DICActivePower:                   "XX.XXXX",
	DICTotalReactivePower:            "XX.XXXX",
	DICPhaseAReactivePower:           "XX.XXXX",
	DICPhaseBReactivePower:           "XX.XXXX",
	DICPhaseCReactivePower:           "XX.XXXX",
	DICReactivePower:                 "XX.XXXX",
	DICTotalApparentPower:            "XX.XXXX",
	DICPhaseAApparentPower:           "XX.XXXX",
	DICPhaseBApparentPower:           "XX.XXXX",
	DICPhaseCApparentPower:           "XX.XXXX",
	DICApparentPower:                 "XX.XXXX",
	DICTotalPowerFactor:              "X.XXX",
	DICPhaseAPowerFactor:             "X.XXX",
	DICPhaseBPowerFactor:             "X.XXX",
	DICPhaseCPowerFactor:             "X.XXX",
	DICPowerFactor:                   "X.XXX",
	DICABLineVoltage:                 "XXX.X",
	DICBCLineVoltage:                 "XXX.X",
	DICCALineVoltage:                 "XXX.X",
	DICLineVoltage:                   "XXX.X",
	DICFrequency:                     "XX.XX",
	DICTotalOverCurrentCount:         "XXXXXX, XXXXXX",
	DICTotalMeterResetCount:          "XXXXXX",
	DICMeterResetRecord:              "",
	DICDateTime:                      "YYMMDDWW",
	DICTime:                          "hhmmss",
	DICAssetManagementCode:           "N",
	DICActiveConstant:                "XXXXXX",
	DICReactiveConstant:              "XXXXXX",
}

// NewFormat is the attribute of DIC.
func (x DIC) NewFormat() string {
	if v, ok := _DICMapNewFormat[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).NewFormat", x)
}

var _DICMapNewSize = map[DIC]int{
	DICTotalActiveEnergy:             4,
	DICPositiveTotalActiveEnergy:     4,
	DICNegativeTotalActiveEnergy:     4,
	DICTotalReactiveEnergy1:          4,
	DICTotalReactiveEnergy2:          4,
	DICFirstQuadrantReactiveEnergy:   4,
	DICSecondQuadrantReactiveEnergy:  4,
	DICThirdQuadrantReactiveEnergy:   4,
	DICFourthQuadrantReactiveEnergy:  4,
	DICPositiveTotalApparentEnergy:   4,
	DICNegativeTotalApparentEnergy:   4,
	DICAssociatedTotalElectricEnergy: 4,
	DICPhaseAVoltage:                 2,
	DICPhaseBVoltage:                 2,
	DICPhaseCVoltage:                 2,
	DICVoltage:                       2,
	DICPhaseACurrent:                 3,
	DICPhaseBCurrent:                 3,
	DICPhaseCCurrent:                 3,
	DICCurrent:                       3,
	DICTotalActivePower:              3,
	DICPhaseAActivePower:             3,
	DICPhaseBActivePower:             3,
	DICPhaseCActivePower:             3,
	DICActivePower:                   3,
	DICTotalReactivePower:            3,
	DICPhaseAReactivePower:           3,
	DICPhaseBReactivePower:           3,
	DICPhaseCReactivePower:           3,
	DICReactivePower:                 3,
	DICTotalApparentPower:            3,
	DICPhaseAApparentPower:           3,
	DICPhaseBApparentPower:           3,
	DICPhaseCApparentPower:           3,
	DICApparentPower:                 3,
	DICTotalPowerFactor:              2,
	DICPhaseAPowerFactor:             2,
	DICPhaseBPowerFactor:             2,
	DICPhaseCPowerFactor:             2,
	DICPowerFactor:                   2,
	DICABLineVoltage:                 2,
	DICBCLineVoltage:                 2,
	DICCALineVoltage:                 2,
	DICLineVoltage:                   2,
	DICFrequency:                     2,
	DICTotalOverCurrentCount:         6,
	DICTotalMeterResetCount:          3,
	DICMeterResetRecord:              0,
	DICDateTime:                      4,
	DICTime:                          3,
	DICAssetManagementCode:           32,
	DICActiveConstant:                3,
	DICReactiveConstant:              3,
}

// NewSize is the attribute of DIC.
func (x DIC) NewSize() int {
	if v, ok := _DICMapNewSize[x]; ok {
		return v
	}
	return 0
}

var _DICMapUnit = map[DIC]string{
	DICTotalActiveEnergy:             "kWh",
	DICPositiveTotalActiveEnergy:     "kWh",
	DICNegativeTotalActiveEnergy:     "kWh",
	DICTotalReactiveEnergy1:          "kvarh",
	DICTotalReactiveEnergy2:          "kvarh",
	DICFirstQuadrantReactiveEnergy:   "kvarh",
	DICSecondQuadrantReactiveEnergy:  "kvarh",
	DICThirdQuadrantReactiveEnergy:   "kvarh",
	DICFourthQuadrantReactiveEnergy:  "kvarh",
	DICPositiveTotalApparentEnergy:   "KVAh",
	DICNegativeTotalApparentEnergy:   "KVAh",
	DICAssociatedTotalElectricEnergy: "KVh",
	DICPhaseAVoltage:                 "V",
	DICPhaseBVoltage:                 "V",
	DICPhaseCVoltage:                 "V",
	DICVoltage:                       "V",
	DICPhaseACurrent:                 "A",
	DICPhaseBCurrent:                 "A",
	DICPhaseCCurrent:                 "A",
	DICCurrent:                       "A",
	DICTotalActivePower:              "kW",
	DICPhaseAActivePower:             "kW",
	DICPhaseBActivePower:             "kW",
	DICPhaseCActivePower:             "kW",
	DICActivePower:                   "kW",
	DICTotalReactivePower:            "kvar",
	DICPhaseAReactivePower:           "kvar",
	DICPhaseBReactivePower:           "kvar",
	DICPhaseCReactivePower:           "kvar",
	DICReactivePower:                 "kvar",
	DICTotalApparentPower:            "kVA",
	DICPhaseAApparentPower:           "kVA",
	DICPhaseBApparentPower:           "kVA",
	DICPhaseCApparentPower:           "kVA",
	DICApparentPower:                 "kVA",
	DICTotalPowerFactor:              "",
	DICPhaseAPowerFactor:             "",
	DICPhaseBPowerFactor:             "",
	DICPhaseCPowerFactor:             "",
	DICPowerFactor:                   "",
	DICABLineVoltage:                 "V",
	DICBCLineVoltage:                 "V",
	DICCALineVoltage:                 "V",
	DICLineVoltage:                   "V",
	DICFrequency:                     "Hz",
	DICTotalOverCurrentCount:         "次,分",
	DICTotalMeterResetCount:          "次",
	DICMeterResetRecord:              "",
	DICDateTime:                      "年月日星期",
	DICTime:                          "时分秒",
	DICAssetManagementCode:           "",
	DICActiveConstant:                "imp/kWh",
	DICReactiveConstant:              "imp/kvarh",
}

// Unit is the attribute of DIC.
func (x DIC) Unit() string {
	if v, ok := _DICMapUnit[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).Unit", x)
}

// Val is the attribute of DIC.
func (x DIC) Val() uint32 {
	return uint32(x)
}

var _DICValues = []DIC{
	DICTotalActiveEnergy,
	DICPositiveTotalActiveEnergy,
	DICNegativeTotalActiveEnergy,
	DICTotalReactiveEnergy1,
	DICTotalReactiveEnergy2,
	DICFirstQuadrantReactiveEnergy,
	DICSecondQuadrantReactiveEnergy,
	DICThirdQuadrantReactiveEnergy,
	DICFourthQuadrantReactiveEnergy,
	DICPositiveTotalApparentEnergy,
	DICNegativeTotalApparentEnergy,
	DICAssociatedTotalElectricEnergy,
	DICPhaseAVoltage,
	DICPhaseBVoltage,
	DICPhaseCVoltage,
	DICVoltage,
	DICPhaseACurrent,
	DICPhaseBCurrent,
	DICPhaseCCurrent,
	DICCurrent,
	DICTotalActivePower,
	DICPhaseAActivePower,
	DICPhaseBActivePower,
	DICPhaseCActivePower,
	DICActivePower,
	DICTotalReactivePower,
	DICPhaseAReactivePower,
	DICPhaseBReactivePower,
	DICPhaseCReactivePower,
	DICReactivePower,
	DICTotalApparentPower,
	DICPhaseAApparentPower,
	DICPhaseBApparentPower,
	DICPhaseCApparentPower,
	DICApparentPower,
	DICTotalPowerFactor,
	DICPhaseAPowerFactor,
	DICPhaseBPowerFactor,
	DICPhaseCPowerFactor,
	DICPowerFactor,
	DICABLineVoltage,
	DICBCLineVoltage,
	DICCALineVoltage,
	DICLineVoltage,
	DICFrequency,
	DICTotalOverCurrentCount,
	DICTotalMeterResetCount,
	DICMeterResetRecord,
	DICDateTime,
	DICTime,
	DICAssetManagementCode,
	DICActiveConstant,
	DICReactiveConstant,
}

// DICValues returns a list of the values of DIC
func DICValues() []DIC {
	return _DICValues
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DIC) IsValid() bool {
	_, ok := _DICMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x DIC) String() string {
	return x.Name()
}

var _DICNameMap = map[string]DIC{
	_DICName[0:17]:                     DICTotalActiveEnergy,
	strings.ToLower(_DICName[0:17]):    DICTotalActiveEnergy,
	_DICName[17:42]:                    DICPositiveTotalActiveEnergy,
	strings.ToLower(_DICName[17:42]):   DICPositiveTotalActiveEnergy,
	_DICName[42:67]:                    DICNegativeTotalActiveEnergy,
	strings.ToLower(_DICName[42:67]):   DICNegativeTotalActiveEnergy,
	_DICName[67:87]:                    DICTotalReactiveEnergy1,
	strings.ToLower(_DICName[67:87]):   DICTotalReactiveEnergy1,
	_DICName[87:107]:                   DICTotalReactiveEnergy2,
	strings.ToLower(_DICName[87:107]):  DICTotalReactiveEnergy2,
	_DICName[107:134]:                  DICFirstQuadrantReactiveEnergy,
	strings.ToLower(_DICName[107:134]): DICFirstQuadrantReactiveEnergy,
	_DICName[134:162]:                  DICSecondQuadrantReactiveEnergy,
	strings.ToLower(_DICName[134:162]): DICSecondQuadrantReactiveEnergy,
	_DICName[162:189]:                  DICThirdQuadrantReactiveEnergy,
	strings.ToLower(_DICName[162:189]): DICThirdQuadrantReactiveEnergy,
	_DICName[189:217]:                  DICFourthQuadrantReactiveEnergy,
	strings.ToLower(_DICName[189:217]): DICFourthQuadrantReactiveEnergy,
	_DICName[217:244]:                  DICPositiveTotalApparentEnergy,
	strings.ToLower(_DICName[217:244]): DICPositiveTotalApparentEnergy,
	_DICName[244:271]:                  DICNegativeTotalApparentEnergy,
	strings.ToLower(_DICName[244:271]): DICNegativeTotalApparentEnergy,
	_DICName[271:300]:                  DICAssociatedTotalElectricEnergy,
	strings.ToLower(_DICName[271:300]): DICAssociatedTotalElectricEnergy,
	_DICName[300:313]:                  DICPhaseAVoltage,
	strings.ToLower(_DICName[300:313]): DICPhaseAVoltage,
	_DICName[313:326]:                  DICPhaseBVoltage,
	strings.ToLower(_DICName[313:326]): DICPhaseBVoltage,
	_DICName[326:339]:                  DICPhaseCVoltage,
	strings.ToLower(_DICName[326:339]): DICPhaseCVoltage,
	_DICName[339:346]:                  DICVoltage,
	strings.ToLower(_DICName[339:346]): DICVoltage,
	_DICName[346:359]:                  DICPhaseACurrent,
	strings.ToLower(_DICName[346:359]): DICPhaseACurrent,
	_DICName[359:372]:                  DICPhaseBCurrent,
	strings.ToLower(_DICName[359:372]): DICPhaseBCurrent,
	_DICName[372:385]:                  DICPhaseCCurrent,
	strings.ToLower(_DICName[372:385]): DICPhaseCCurrent,
	_DICName[385:392]:                  DICCurrent,
	strings.ToLower(_DICName[385:392]): DICCurrent,
	_DICName[392:408]:                  DICTotalActivePower,
	strings.ToLower(_DICName[392:408]): DICTotalActivePower,
	_DICName[408:425]:                  DICPhaseAActivePower,
	strings.ToLower(_DICName[408:425]): DICPhaseAActivePower,
	_DICName[425:442]:                  DICPhaseBActivePower,
	strings.ToLower(_DICName[425:442]): DICPhaseBActivePower,
	_DICName[442:459]:                  DICPhaseCActivePower,
	strings.ToLower(_DICName[442:459]): DICPhaseCActivePower,
	_DICName[459:470]:                  DICActivePower,
	strings.ToLower(_DICName[459:470]): DICActivePower,
	_DICName[470:488]:                  DICTotalReactivePower,
	strings.ToLower(_DICName[470:488]): DICTotalReactivePower,
	_DICName[488:507]:                  DICPhaseAReactivePower,
	strings.ToLower(_DICName[488:507]): DICPhaseAReactivePower,
	_DICName[507:526]:                  DICPhaseBReactivePower,
	strings.ToLower(_DICName[507:526]): DICPhaseBReactivePower,
	_DICName[526:545]:                  DICPhaseCReactivePower,
	strings.ToLower(_DICName[526:545]): DICPhaseCReactivePower,
	_DICName[545:558]:                  DICReactivePower,
	strings.ToLower(_DICName[545:558]): DICReactivePower,
	_DICName[558:576]:                  DICTotalApparentPower,
	strings.ToLower(_DICName[558:576]): DICTotalApparentPower,
	_DICName[576:595]:                  DICPhaseAApparentPower,
	strings.ToLower(_DICName[576:595]): DICPhaseAApparentPower,
	_DICName[595:614]:                  DICPhaseBApparentPower,
	strings.ToLower(_DICName[595:614]): DICPhaseBApparentPower,
	_DICName[614:633]:                  DICPhaseCApparentPower,
	strings.ToLower(_DICName[614:633]): DICPhaseCApparentPower,
	_DICName[633:646]:                  DICApparentPower,
	strings.ToLower(_DICName[633:646]): DICApparentPower,
	_DICName[646:662]:                  DICTotalPowerFactor,
	strings.ToLower(_DICName[646:662]): DICTotalPowerFactor,
	_DICName[662:679]:                  DICPhaseAPowerFactor,
	strings.ToLower(_DICName[662:679]): DICPhaseAPowerFactor,
	_DICName[679:696]:                  DICPhaseBPowerFactor,
	strings.ToLower(_DICName[679:696]): DICPhaseBPowerFactor,
	_DICName[696:713]:                  DICPhaseCPowerFactor,
	strings.ToLower(_DICName[696:713]): DICPhaseCPowerFactor,
	_DICName[713:724]:                  DICPowerFactor,
	strings.ToLower(_DICName[713:724]): DICPowerFactor,
	_DICName[724:737]:                  DICABLineVoltage,
	strings.ToLower(_DICName[724:737]): DICABLineVoltage,
	_DICName[737:750]:                  DICBCLineVoltage,
	strings.ToLower(_DICName[737:750]): DICBCLineVoltage,
	_DICName[750:763]:                  DICCALineVoltage,
	strings.ToLower(_DICName[750:763]): DICCALineVoltage,
	_DICName[763:774]:                  DICLineVoltage,
	strings.ToLower(_DICName[763:774]): DICLineVoltage,
	_DICName[774:783]:                  DICFrequency,
	strings.ToLower(_DICName[774:783]): DICFrequency,
	_DICName[783:804]:                  DICTotalOverCurrentCount,
	strings.ToLower(_DICName[783:804]): DICTotalOverCurrentCount,
	_DICName[804:824]:                  DICTotalMeterResetCount,
	strings.ToLower(_DICName[804:824]): DICTotalMeterResetCount,
	_DICName[824:840]:                  DICMeterResetRecord,
	strings.ToLower(_DICName[824:840]): DICMeterResetRecord,
	_DICName[840:848]:                  DICDateTime,
	strings.ToLower(_DICName[840:848]): DICDateTime,
	_DICName[848:852]:                  DICTime,
	strings.ToLower(_DICName[848:852]): DICTime,
	_DICName[852:871]:                  DICAssetManagementCode,
	strings.ToLower(_DICName[852:871]): DICAssetManagementCode,
	_DICName[871:885]:                  DICActiveConstant,
	strings.ToLower(_DICName[871:885]): DICActiveConstant,
	_DICName[885:901]:                  DICReactiveConstant,
	strings.ToLower(_DICName[885:901]): DICReactiveConstant,
}

// ParseDIC converts a string to a DIC.
func ParseDIC(value string) (DIC, error) {
	if x, ok := _DICNameMap[value]; ok {
		return x, nil
	}
	if x, ok := _DICNameMap[strings.ToLower(value)]; ok {
		return x, nil
	}
	return DIC(0), fmt.Errorf("%s is %w", value, ErrInvalidDIC)
}

var ErrInvalidErrorCode = errors.New("not a valid ErrorCode")

var _ErrorCodeName = "RATEDAYYEARBRPDDATAOTHER"

var _ErrorCodeMapName = map[ErrorCode]string{
	ErrorCodeRATE:  _ErrorCodeName[0:4],
	ErrorCodeDAY:   _ErrorCodeName[4:7],
	ErrorCodeYEAR:  _ErrorCodeName[7:11],
	ErrorCodeBR:    _ErrorCodeName[11:13],
	ErrorCodePD:    _ErrorCodeName[13:15],
	ErrorCodeDATA:  _ErrorCodeName[15:19],
	ErrorCodeOTHER: _ErrorCodeName[19:24],
}

// Name is the attribute of ErrorCode.
func (x ErrorCode) Name() string {
	if v, ok := _ErrorCodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("ErrorCode(%d).Name", x)
}

var _ErrorCodeMapMsg = map[ErrorCode]string{
	ErrorCodeRATE:  "费率数超",
	ErrorCodeDAY:   "日时段数超",
	ErrorCodeYEAR:  "年时区数超",
	ErrorCodeBR:    "通信速率不能更改",
	ErrorCodePD:    "密码错误/未授权",
	ErrorCodeDATA:  "无请求数据",
	ErrorCodeOTHER: "其他错误",
}

// Msg is the attribute of ErrorCode.
func (x ErrorCode) Msg() string {
	if v, ok := _ErrorCodeMapMsg[x]; ok {
		return v
	}
	return fmt.Sprintf("ErrorCode(%d).Msg", x)
}

// Val is the attribute of ErrorCode.
func (x ErrorCode) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ErrorCode) IsValid() bool {
	_, ok := _ErrorCodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x ErrorCode) String() string {
	return x.Name()
}

var _ErrorCodeNameMap = map[string]ErrorCode{
	_ErrorCodeName[0:4]:   ErrorCodeRATE,
	_ErrorCodeName[4:7]:   ErrorCodeDAY,
	_ErrorCodeName[7:11]:  ErrorCodeYEAR,
	_ErrorCodeName[11:13]: ErrorCodeBR,
	_ErrorCodeName[13:15]: ErrorCodePD,
	_ErrorCodeName[15:19]: ErrorCodeDATA,
	_ErrorCodeName[19:24]: ErrorCodeOTHER,
}

// ParseErrorCode converts a string to an ErrorCode.
func ParseErrorCode(value string) (ErrorCode, error) {
	if x, ok := _ErrorCodeNameMap[value]; ok {
		return x, nil
	}
	return ErrorCode(0), fmt.Errorf("%s is %w", value, ErrInvalidErrorCode)
}

var ErrInvalidP = errors.New("not a valid P")

var _PName = "V1997V2007"

var _PMapName = map[P]string{
	PV1997: _PName[0:5],
	PV2007: _PName[5:10],
}

// Name is the attribute of P.
func (x P) Name() string {
	if v, ok := _PMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("P(%d).Name", x)
}

var _PMapCmdLen = map[P]int{
	PV1997: 14,
	PV2007: 16,
}

// CmdLen is the attribute of P.
func (x P) CmdLen() int {
	if v, ok := _PMapCmdLen[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of P.
func (x P) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x P) IsValid() bool {
	_, ok := _PMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x P) String() string {
	return x.Name()
}

var _PNameMap = map[string]P{
	_PName[0:5]:  PV1997,
	_PName[5:10]: PV2007,
}

// ParseP converts a string to a P.
func ParseP(value string) (P, error) {
	if x, ok := _PNameMap[value]; ok {
		return x, nil
	}
	return P(0), fmt.Errorf("%s is %w", value, ErrInvalidP)
}

var ErrInvalidState = errors.New("not a valid State")

var _StateName = "UnknownConnectingConnectedDisconnectedConnectClosed"

var _StateMapName = map[State]string{
	StateUnknown:       _StateName[0:7],
	StateConnecting:    _StateName[7:17],
	StateConnected:     _StateName[17:26],
	StateDisconnected:  _StateName[26:38],
	StateConnectClosed: _StateName[38:51],
}

// Name is the attribute of State.
func (x State) Name() string {
	if v, ok := _StateMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("State(%d).Name", x)
}

// Val is the attribute of State.
func (x State) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x State) IsValid() bool {
	_, ok := _StateMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x State) String() string {
	return x.Name()
}

var _StateNameMap = map[string]State{
	_StateName[0:7]:                    StateUnknown,
	strings.ToLower(_StateName[0:7]):   StateUnknown,
	_StateName[7:17]:                   StateConnecting,
	strings.ToLower(_StateName[7:17]):  StateConnecting,
	_StateName[17:26]:                  StateConnected,
	strings.ToLower(_StateName[17:26]): StateConnected,
	_StateName[26:38]:                  StateDisconnected,
	strings.ToLower(_StateName[26:38]): StateDisconnected,
	_StateName[38:51]:                  StateConnectClosed,
	strings.ToLower(_StateName[38:51]): StateConnectClosed,
}

// ParseState converts a string to a State.
func ParseState(value string) (State, error) {
	if x, ok := _StateNameMap[value]; ok {
		return x, nil
	}
	if x, ok := _StateNameMap[strings.ToLower(value)]; ok {
		return x, nil
	}
	return State(0), fmt.Errorf("%s is %w", value, ErrInvalidState)
}

// MarshalText implements the text marshaller method.
func (x State) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *State) UnmarshalText(text []byte) error {
	val, err := ParseState(string(text))
	if err != nil {
		return err
	}
	*x = val
	return nil
}
