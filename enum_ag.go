// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package dlt645

import (
	"errors"
	"fmt"
)

const (
	// CodeBrc is a Code of type BRC.
	CodeBrc Code = iota // 广播校时
	// CodeRd is a Code of type RD.
	CodeRd // 读数据
	// CodeRdm is a Code of type RDM.
	CodeRdm // 读后续数据
	// CodeRda is a Code of type RDA.
	CodeRda // 读设备地址
	// CodeWr is a Code of type WR.
	CodeWr // 写数据
	// CodeWra is a Code of type WRA.
	CodeWra // 写设备地址
	// CodeDj is a Code of type DJ.
	CodeDj // 冻结
	// CodeBr is a Code of type BR.
	CodeBr // 更改通信速率
	// CodePd is a Code of type PD.
	CodePd // 修改密码
	// CodeXl is a Code of type XL.
	CodeXl // 最大需量清零
	// CodeDb is a Code of type DB.
	CodeDb // 电表清零
	// CodeMsg is a Code of type MSG.
	CodeMsg // 事件清零
	// CodeRr is a Code of type RR.
	CodeRr // 重读数据
)

const (
	// DICPhaseAvoltage is a DIC of type PhaseAVoltage.
	DICPhaseAvoltage DIC = 33620224 // A相电压
	// DICPhaseCvoltage is a DIC of type PhaseCVoltage.
	DICPhaseCvoltage DIC = 33620736 // C相电压
	// DICPhaseBvoltage is a DIC of type PhaseBVoltage.
	DICPhaseBvoltage DIC = 33620480 // B相电压
	// DICVoltage is a DIC of type Voltage.
	DICVoltage DIC = 33685248 // 电压数据块
	// DICPhaseAcurrent is a DIC of type PhaseACurrent.
	DICPhaseAcurrent DIC = 33685760 // A相电流
	// DICPhaseBcurrent is a DIC of type PhaseBCurrent.
	DICPhaseBcurrent DIC = 33686016 // B相电流
	// DICPhaseCcurrent is a DIC of type PhaseCCurrent.
	DICPhaseCcurrent DIC = 33686272 // C相电流
	// DICCurrent is a DIC of type Current.
	DICCurrent DIC = 33750784 // 电流数据块
	// DICTotalActivePower is a DIC of type TotalActivePower.
	DICTotalActivePower DIC = 33751040 // 总有功功率
	// DICPhaseAactivePower is a DIC of type PhaseAActivePower.
	DICPhaseAactivePower DIC = 33751296 // A相有功功率
	// DICPhaseBactivePower is a DIC of type PhaseBActivePower.
	DICPhaseBactivePower DIC = 33751552 // B相有功功率
	// DICPhaseCactivePower is a DIC of type PhaseCActivePower.
	DICPhaseCactivePower DIC = 33751808 // C相有功功率
	// DICActivePower is a DIC of type ActivePower.
	DICActivePower DIC = 33816320 // 有功功率数据块
	// DICTotalReactivePower is a DIC of type TotalReactivePower.
	DICTotalReactivePower DIC = 33816576 // 总无功功率
	// DICPhaseAreactivePower is a DIC of type PhaseAReactivePower.
	DICPhaseAreactivePower DIC = 33816832 // A相无功功率
	// DICPhaseBreactivePower is a DIC of type PhaseBReactivePower.
	DICPhaseBreactivePower DIC = 33817088 // B相无功功率
	// DICPhaseCreactivePower is a DIC of type PhaseCReactivePower.
	DICPhaseCreactivePower DIC = 33817344 // C相无功功率
	// DICReactivePower is a DIC of type ReactivePower.
	DICReactivePower DIC = 33881856 // 无功功率数据块
	// DICTotalApparentPower is a DIC of type TotalApparentPower.
	DICTotalApparentPower DIC = 33882112 // 总视在功率
	// DICPhaseAapparentPower is a DIC of type PhaseAApparentPower.
	DICPhaseAapparentPower DIC = 33882368 // A相视在功率
	// DICPhaseBapparentPower is a DIC of type PhaseBApparentPower.
	DICPhaseBapparentPower DIC = 33882624 // B相视在功率
	// DICPhaseCapparentPower is a DIC of type PhaseCApparentPower.
	DICPhaseCapparentPower DIC = 33882880 // C相视在功率
	// DICApparentPower is a DIC of type ApparentPower.
	DICApparentPower DIC = 33947392 // 视在功率数据块
)

const (
	// ErrorCodeRate is an ErrorCode of type RATE.
	ErrorCodeRate ErrorCode = iota // 费率数超
	// ErrorCodeDay is an ErrorCode of type DAY.
	ErrorCodeDay // 日时段数超
	// ErrorCodeYear is an ErrorCode of type YEAR.
	ErrorCodeYear // 年时区数超
	// ErrorCodeBr is an ErrorCode of type BR.
	ErrorCodeBr // 通信速率不能更改
	// ErrorCodePd is an ErrorCode of type PD.
	ErrorCodePd // 密码错误/未授权
	// ErrorCodeData is an ErrorCode of type DATA.
	ErrorCodeData // 无请求数据
	// ErrorCodeOther is an ErrorCode of type OTHER.
	ErrorCodeOther // 其他错误
)

const (
	// V1997 is a V of type _1997.
	V1997 V = iota
	// V2007 is a V of type _2007.
	V2007
)

var ErrInvalidCode = errors.New("not a valid Code")

var _CodeName = "BRCRDRDMRDAWRWRADJBRPDXLDBMSGRR"

var _CodeMapName = map[Code]string{
	CodeBrc: _CodeName[0:3],
	CodeRd:  _CodeName[3:5],
	CodeRdm: _CodeName[5:8],
	CodeRda: _CodeName[8:11],
	CodeWr:  _CodeName[11:13],
	CodeWra: _CodeName[13:16],
	CodeDj:  _CodeName[16:18],
	CodeBr:  _CodeName[18:20],
	CodePd:  _CodeName[20:22],
	CodeXl:  _CodeName[22:24],
	CodeDb:  _CodeName[24:26],
	CodeMsg: _CodeName[26:29],
	CodeRr:  _CodeName[29:31],
}

// Name is the attribute of Code.
func (x Code) Name() string {
	if v, ok := _CodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("Code(%d).Name", x)
}

var _CodeMapC1997 = map[Code]uint8{
	CodeBrc: 8,
	CodeRd:  1,
	CodeRdm: 2,
	CodeRda: 255,
	CodeWr:  4,
	CodeWra: 10,
	CodeDj:  255,
	CodeBr:  12,
	CodePd:  15,
	CodeXl:  16,
	CodeDb:  255,
	CodeMsg: 255,
	CodeRr:  3,
}

// C1997 is the attribute of Code.
func (x Code) C1997() uint8 {
	if v, ok := _CodeMapC1997[x]; ok {
		return v
	}
	return 0
}

var _CodeMapC2007 = map[Code]uint8{
	CodeBrc: 8,
	CodeRd:  17,
	CodeRdm: 18,
	CodeRda: 19,
	CodeWr:  20,
	CodeWra: 21,
	CodeDj:  22,
	CodeBr:  23,
	CodePd:  24,
	CodeXl:  25,
	CodeDb:  26,
	CodeMsg: 27,
	CodeRr:  255,
}

// C2007 is the attribute of Code.
func (x Code) C2007() uint8 {
	if v, ok := _CodeMapC2007[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of Code.
func (x Code) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Code) IsValid() bool {
	_, ok := _CodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x Code) String() string {
	return x.Name()
}

var _CodeNameMap = map[string]Code{
	_CodeName[0:3]:   CodeBrc,
	_CodeName[3:5]:   CodeRd,
	_CodeName[5:8]:   CodeRdm,
	_CodeName[8:11]:  CodeRda,
	_CodeName[11:13]: CodeWr,
	_CodeName[13:16]: CodeWra,
	_CodeName[16:18]: CodeDj,
	_CodeName[18:20]: CodeBr,
	_CodeName[20:22]: CodePd,
	_CodeName[22:24]: CodeXl,
	_CodeName[24:26]: CodeDb,
	_CodeName[26:29]: CodeMsg,
	_CodeName[29:31]: CodeRr,
}

// ParseCode converts a string to a Code.
func ParseCode(value string) (Code, error) {
	if x, ok := _CodeNameMap[value]; ok {
		return x, nil
	}
	return Code(0), fmt.Errorf("%s is %w", value, ErrInvalidCode)
}

var ErrInvalidDIC = errors.New("not a valid DIC")

var _DICName = "PhaseAVoltagePhaseCVoltagePhaseBVoltageVoltagePhaseACurrentPhaseBCurrentPhaseCCurrentCurrentTotalActivePowerPhaseAActivePowerPhaseBActivePowerPhaseCActivePowerActivePowerTotalReactivePowerPhaseAReactivePowerPhaseBReactivePowerPhaseCReactivePowerReactivePowerTotalApparentPowerPhaseAApparentPowerPhaseBApparentPowerPhaseCApparentPowerApparentPower"

var _DICMapName = map[DIC]string{
	DICPhaseAvoltage:       _DICName[0:13],
	DICPhaseCvoltage:       _DICName[13:26],
	DICPhaseBvoltage:       _DICName[26:39],
	DICVoltage:             _DICName[39:46],
	DICPhaseAcurrent:       _DICName[46:59],
	DICPhaseBcurrent:       _DICName[59:72],
	DICPhaseCcurrent:       _DICName[72:85],
	DICCurrent:             _DICName[85:92],
	DICTotalActivePower:    _DICName[92:108],
	DICPhaseAactivePower:   _DICName[108:125],
	DICPhaseBactivePower:   _DICName[125:142],
	DICPhaseCactivePower:   _DICName[142:159],
	DICActivePower:         _DICName[159:170],
	DICTotalReactivePower:  _DICName[170:188],
	DICPhaseAreactivePower: _DICName[188:207],
	DICPhaseBreactivePower: _DICName[207:226],
	DICPhaseCreactivePower: _DICName[226:245],
	DICReactivePower:       _DICName[245:258],
	DICTotalApparentPower:  _DICName[258:276],
	DICPhaseAapparentPower: _DICName[276:295],
	DICPhaseBapparentPower: _DICName[295:314],
	DICPhaseCapparentPower: _DICName[314:333],
	DICApparentPower:       _DICName[333:346],
}

// Name is the attribute of DIC.
func (x DIC) Name() string {
	if v, ok := _DICMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).Name", x)
}

var _DICMapOld = map[DIC]uint{
	DICPhaseAvoltage:       4294967295,
	DICPhaseCvoltage:       4294967295,
	DICPhaseBvoltage:       4294967295,
	DICVoltage:             4294967295,
	DICPhaseAcurrent:       4294967295,
	DICPhaseBcurrent:       4294967295,
	DICPhaseCcurrent:       4294967295,
	DICCurrent:             4294967295,
	DICTotalActivePower:    4294967295,
	DICPhaseAactivePower:   4294967295,
	DICPhaseBactivePower:   4294967295,
	DICPhaseCactivePower:   4294967295,
	DICActivePower:         4294967295,
	DICTotalReactivePower:  4294967295,
	DICPhaseAreactivePower: 4294967295,
	DICPhaseBreactivePower: 4294967295,
	DICPhaseCreactivePower: 4294967295,
	DICReactivePower:       4294967295,
	DICTotalApparentPower:  4294967295,
	DICPhaseAapparentPower: 4294967295,
	DICPhaseBapparentPower: 4294967295,
	DICPhaseCapparentPower: 4294967295,
	DICApparentPower:       4294967295,
}

// Old is the attribute of DIC.
func (x DIC) Old() uint {
	if v, ok := _DICMapOld[x]; ok {
		return v
	}
	return 0
}

var _DICMapFormat = map[DIC]string{
	DICPhaseAvoltage:       "XXX.X",
	DICPhaseCvoltage:       "XXX.X",
	DICPhaseBvoltage:       "XXX.X",
	DICVoltage:             "XXX.X",
	DICPhaseAcurrent:       "XXX.XXX",
	DICPhaseBcurrent:       "XXX.XXX",
	DICPhaseCcurrent:       "XXX.XXX",
	DICCurrent:             "XXX.XXX",
	DICTotalActivePower:    "XX.XXXX",
	DICPhaseAactivePower:   "XX.XXXX",
	DICPhaseBactivePower:   "XX.XXXX",
	DICPhaseCactivePower:   "XX.XXXX",
	DICActivePower:         "XX.XXXX",
	DICTotalReactivePower:  "XX.XXXX",
	DICPhaseAreactivePower: "XX.XXXX",
	DICPhaseBreactivePower: "XX.XXXX",
	DICPhaseCreactivePower: "XX.XXXX",
	DICReactivePower:       "XX.XXXX",
	DICTotalApparentPower:  "XX.XXXX",
	DICPhaseAapparentPower: "XX.XXXX",
	DICPhaseBapparentPower: "XX.XXXX",
	DICPhaseCapparentPower: "XX.XXXX",
	DICApparentPower:       "XX.XXXX",
}

// Format is the attribute of DIC.
func (x DIC) Format() string {
	if v, ok := _DICMapFormat[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).Format", x)
}

var _DICMapSize = map[DIC]int{
	DICPhaseAvoltage:       2,
	DICPhaseCvoltage:       2,
	DICPhaseBvoltage:       2,
	DICVoltage:             2,
	DICPhaseAcurrent:       3,
	DICPhaseBcurrent:       3,
	DICPhaseCcurrent:       3,
	DICCurrent:             3,
	DICTotalActivePower:    3,
	DICPhaseAactivePower:   3,
	DICPhaseBactivePower:   3,
	DICPhaseCactivePower:   3,
	DICActivePower:         3,
	DICTotalReactivePower:  3,
	DICPhaseAreactivePower: 3,
	DICPhaseBreactivePower: 3,
	DICPhaseCreactivePower: 3,
	DICReactivePower:       3,
	DICTotalApparentPower:  3,
	DICPhaseAapparentPower: 3,
	DICPhaseBapparentPower: 3,
	DICPhaseCapparentPower: 3,
	DICApparentPower:       3,
}

// Size is the attribute of DIC.
func (x DIC) Size() int {
	if v, ok := _DICMapSize[x]; ok {
		return v
	}
	return 0
}

var _DICMapUnit = map[DIC]string{
	DICPhaseAvoltage:       "V",
	DICPhaseCvoltage:       "V",
	DICPhaseBvoltage:       "V",
	DICVoltage:             "V",
	DICPhaseAcurrent:       "A",
	DICPhaseBcurrent:       "A",
	DICPhaseCcurrent:       "A",
	DICCurrent:             "A",
	DICTotalActivePower:    "kW",
	DICPhaseAactivePower:   "kW",
	DICPhaseBactivePower:   "kW",
	DICPhaseCactivePower:   "kW",
	DICActivePower:         "kW",
	DICTotalReactivePower:  "kvar",
	DICPhaseAreactivePower: "kvar",
	DICPhaseBreactivePower: "kvar",
	DICPhaseCreactivePower: "kvar",
	DICReactivePower:       "kvar",
	DICTotalApparentPower:  "kVA",
	DICPhaseAapparentPower: "kVA",
	DICPhaseBapparentPower: "kVA",
	DICPhaseCapparentPower: "kVA",
	DICApparentPower:       "kVA",
}

// Unit is the attribute of DIC.
func (x DIC) Unit() string {
	if v, ok := _DICMapUnit[x]; ok {
		return v
	}
	return fmt.Sprintf("DIC(%d).Unit", x)
}

// Val is the attribute of DIC.
func (x DIC) Val() uint {
	return uint(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DIC) IsValid() bool {
	_, ok := _DICMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x DIC) String() string {
	return x.Name()
}

var _DICNameMap = map[string]DIC{
	_DICName[0:13]:    DICPhaseAvoltage,
	_DICName[13:26]:   DICPhaseCvoltage,
	_DICName[26:39]:   DICPhaseBvoltage,
	_DICName[39:46]:   DICVoltage,
	_DICName[46:59]:   DICPhaseAcurrent,
	_DICName[59:72]:   DICPhaseBcurrent,
	_DICName[72:85]:   DICPhaseCcurrent,
	_DICName[85:92]:   DICCurrent,
	_DICName[92:108]:  DICTotalActivePower,
	_DICName[108:125]: DICPhaseAactivePower,
	_DICName[125:142]: DICPhaseBactivePower,
	_DICName[142:159]: DICPhaseCactivePower,
	_DICName[159:170]: DICActivePower,
	_DICName[170:188]: DICTotalReactivePower,
	_DICName[188:207]: DICPhaseAreactivePower,
	_DICName[207:226]: DICPhaseBreactivePower,
	_DICName[226:245]: DICPhaseCreactivePower,
	_DICName[245:258]: DICReactivePower,
	_DICName[258:276]: DICTotalApparentPower,
	_DICName[276:295]: DICPhaseAapparentPower,
	_DICName[295:314]: DICPhaseBapparentPower,
	_DICName[314:333]: DICPhaseCapparentPower,
	_DICName[333:346]: DICApparentPower,
}

// ParseDIC converts a string to a DIC.
func ParseDIC(value string) (DIC, error) {
	if x, ok := _DICNameMap[value]; ok {
		return x, nil
	}
	return DIC(0), fmt.Errorf("%s is %w", value, ErrInvalidDIC)
}

var ErrInvalidErrorCode = errors.New("not a valid ErrorCode")

var _ErrorCodeName = "RATEDAYYEARBRPDDATAOTHER"

var _ErrorCodeMapName = map[ErrorCode]string{
	ErrorCodeRate:  _ErrorCodeName[0:4],
	ErrorCodeDay:   _ErrorCodeName[4:7],
	ErrorCodeYear:  _ErrorCodeName[7:11],
	ErrorCodeBr:    _ErrorCodeName[11:13],
	ErrorCodePd:    _ErrorCodeName[13:15],
	ErrorCodeData:  _ErrorCodeName[15:19],
	ErrorCodeOther: _ErrorCodeName[19:24],
}

// Name is the attribute of ErrorCode.
func (x ErrorCode) Name() string {
	if v, ok := _ErrorCodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("ErrorCode(%d).Name", x)
}

var _ErrorCodeMapC1997 = map[ErrorCode]uint8{
	ErrorCodeRate:  64,
	ErrorCodeDay:   32,
	ErrorCodeYear:  16,
	ErrorCodeBr:    8,
	ErrorCodePd:    4,
	ErrorCodeData:  2,
	ErrorCodeOther: 1,
}

// C1997 is the attribute of ErrorCode.
func (x ErrorCode) C1997() uint8 {
	if v, ok := _ErrorCodeMapC1997[x]; ok {
		return v
	}
	return 0
}

var _ErrorCodeMapC2007 = map[ErrorCode]uint8{
	ErrorCodeRate:  64,
	ErrorCodeDay:   32,
	ErrorCodeYear:  16,
	ErrorCodeBr:    8,
	ErrorCodePd:    4,
	ErrorCodeData:  2,
	ErrorCodeOther: 1,
}

// C2007 is the attribute of ErrorCode.
func (x ErrorCode) C2007() uint8 {
	if v, ok := _ErrorCodeMapC2007[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of ErrorCode.
func (x ErrorCode) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ErrorCode) IsValid() bool {
	_, ok := _ErrorCodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x ErrorCode) String() string {
	return x.Name()
}

var _ErrorCodeNameMap = map[string]ErrorCode{
	_ErrorCodeName[0:4]:   ErrorCodeRate,
	_ErrorCodeName[4:7]:   ErrorCodeDay,
	_ErrorCodeName[7:11]:  ErrorCodeYear,
	_ErrorCodeName[11:13]: ErrorCodeBr,
	_ErrorCodeName[13:15]: ErrorCodePd,
	_ErrorCodeName[15:19]: ErrorCodeData,
	_ErrorCodeName[19:24]: ErrorCodeOther,
}

// ParseErrorCode converts a string to an ErrorCode.
func ParseErrorCode(value string) (ErrorCode, error) {
	if x, ok := _ErrorCodeNameMap[value]; ok {
		return x, nil
	}
	return ErrorCode(0), fmt.Errorf("%s is %w", value, ErrInvalidErrorCode)
}

var ErrInvalidV = errors.New("not a valid V")

var _VName = "_1997_2007"

var _VMapName = map[V]string{
	V1997: _VName[0:5],
	V2007: _VName[5:10],
}

// Name is the attribute of V.
func (x V) Name() string {
	if v, ok := _VMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("V(%d).Name", x)
}

// Val is the attribute of V.
func (x V) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x V) IsValid() bool {
	_, ok := _VMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x V) String() string {
	return x.Name()
}

var _VNameMap = map[string]V{
	_VName[0:5]:  V1997,
	_VName[5:10]: V2007,
}

// ParseV converts a string to a V.
func ParseV(value string) (V, error) {
	if x, ok := _VNameMap[value]; ok {
		return x, nil
	}
	return V(0), fmt.Errorf("%s is %w", value, ErrInvalidV)
}
