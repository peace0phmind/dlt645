// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package dlt645

import (
	"errors"
	"fmt"
)

const (
	// CodeBrc is a Code of type BRC.
	CodeBrc Code = 8 // 广播校时
	// CodeRd is a Code of type RD.
	CodeRd Code = 17 // 读数据
	// CodeRdm is a Code of type RDM.
	CodeRdm Code = 18 // 读后续数据
	// CodeRda is a Code of type RDA.
	CodeRda Code = 19 // 读设备地址
	// CodeWr is a Code of type WR.
	CodeWr Code = 20 // 写数据
	// CodeWra is a Code of type WRA.
	CodeWra Code = 21 // 写设备地址
	// CodeDj is a Code of type DJ.
	CodeDj Code = 22 // 冻结
	// CodeBr is a Code of type BR.
	CodeBr Code = 23 // 更改通信速率
	// CodePd is a Code of type PD.
	CodePd Code = 24 // 修改密码
	// CodeXl is a Code of type XL.
	CodeXl Code = 25 // 最大需量清零
	// CodeDb is a Code of type DB.
	CodeDb Code = 26 // 电表清零
	// CodeMsg is a Code of type MSG.
	CodeMsg Code = 27 // 事件清零
	// CodeRr is a Code of type RR.
	CodeRr Code = 255 // 重读数据
)

const (
	// ErrorCodeRate is an ErrorCode of type RATE.
	ErrorCodeRate ErrorCode = 64 // 费率数超
	// ErrorCodeDay is an ErrorCode of type DAY.
	ErrorCodeDay ErrorCode = 32 // 日时段数超
	// ErrorCodeYear is an ErrorCode of type YEAR.
	ErrorCodeYear ErrorCode = 16 // 年时区数超
	// ErrorCodeBr is an ErrorCode of type BR.
	ErrorCodeBr ErrorCode = 8 // 通信速率不能更改
	// ErrorCodePd is an ErrorCode of type PD.
	ErrorCodePd ErrorCode = 4 // 密码错误/未授权
	// ErrorCodeData is an ErrorCode of type DATA.
	ErrorCodeData ErrorCode = 2 // 无请求数据
	// ErrorCodeOther is an ErrorCode of type OTHER.
	ErrorCodeOther ErrorCode = 1 // 其他错误
)

const (
	// V1997 is a V of type _1997.
	V1997 V = iota
	// V2007 is a V of type _2007.
	V2007
)

var ErrInvalidCode = errors.New("not a valid Code")

var _CodeName = "BRCRDRDMRDAWRWRADJBRPDXLDBMSGRR"

var _CodeMapName = map[Code]string{
	CodeBrc: _CodeName[0:3],
	CodeRd:  _CodeName[3:5],
	CodeRdm: _CodeName[5:8],
	CodeRda: _CodeName[8:11],
	CodeWr:  _CodeName[11:13],
	CodeWra: _CodeName[13:16],
	CodeDj:  _CodeName[16:18],
	CodeBr:  _CodeName[18:20],
	CodePd:  _CodeName[20:22],
	CodeXl:  _CodeName[22:24],
	CodeDb:  _CodeName[24:26],
	CodeMsg: _CodeName[26:29],
	CodeRr:  _CodeName[29:31],
}

// Name is the attribute of Code.
func (x Code) Name() string {
	if v, ok := _CodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("Code(%d).Name", x)
}

var _CodeMapOld = map[Code]uint8{
	CodeBrc: 8,
	CodeRd:  1,
	CodeRdm: 2,
	CodeRda: 255,
	CodeWr:  4,
	CodeWra: 10,
	CodeDj:  255,
	CodeBr:  12,
	CodePd:  15,
	CodeXl:  16,
	CodeDb:  255,
	CodeMsg: 255,
	CodeRr:  3,
}

// Old is the attribute of Code.
func (x Code) Old() uint8 {
	if v, ok := _CodeMapOld[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of Code.
func (x Code) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Code) IsValid() bool {
	_, ok := _CodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x Code) String() string {
	return x.Name()
}

var _CodeNameMap = map[string]Code{
	_CodeName[0:3]:   CodeBrc,
	_CodeName[3:5]:   CodeRd,
	_CodeName[5:8]:   CodeRdm,
	_CodeName[8:11]:  CodeRda,
	_CodeName[11:13]: CodeWr,
	_CodeName[13:16]: CodeWra,
	_CodeName[16:18]: CodeDj,
	_CodeName[18:20]: CodeBr,
	_CodeName[20:22]: CodePd,
	_CodeName[22:24]: CodeXl,
	_CodeName[24:26]: CodeDb,
	_CodeName[26:29]: CodeMsg,
	_CodeName[29:31]: CodeRr,
}

// ParseCode converts a string to a Code.
func ParseCode(value string) (Code, error) {
	if x, ok := _CodeNameMap[value]; ok {
		return x, nil
	}
	return Code(0), fmt.Errorf("%s is %w", value, ErrInvalidCode)
}

var ErrInvalidErrorCode = errors.New("not a valid ErrorCode")

var _ErrorCodeName = "RATEDAYYEARBRPDDATAOTHER"

var _ErrorCodeMapName = map[ErrorCode]string{
	ErrorCodeRate:  _ErrorCodeName[0:4],
	ErrorCodeDay:   _ErrorCodeName[4:7],
	ErrorCodeYear:  _ErrorCodeName[7:11],
	ErrorCodeBr:    _ErrorCodeName[11:13],
	ErrorCodePd:    _ErrorCodeName[13:15],
	ErrorCodeData:  _ErrorCodeName[15:19],
	ErrorCodeOther: _ErrorCodeName[19:24],
}

// Name is the attribute of ErrorCode.
func (x ErrorCode) Name() string {
	if v, ok := _ErrorCodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("ErrorCode(%d).Name", x)
}

var _ErrorCodeMapOld = map[ErrorCode]uint8{
	ErrorCodeRate:  64,
	ErrorCodeDay:   32,
	ErrorCodeYear:  16,
	ErrorCodeBr:    8,
	ErrorCodePd:    4,
	ErrorCodeData:  2,
	ErrorCodeOther: 1,
}

// Old is the attribute of ErrorCode.
func (x ErrorCode) Old() uint8 {
	if v, ok := _ErrorCodeMapOld[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of ErrorCode.
func (x ErrorCode) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ErrorCode) IsValid() bool {
	_, ok := _ErrorCodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x ErrorCode) String() string {
	return x.Name()
}

var _ErrorCodeNameMap = map[string]ErrorCode{
	_ErrorCodeName[0:4]:   ErrorCodeRate,
	_ErrorCodeName[4:7]:   ErrorCodeDay,
	_ErrorCodeName[7:11]:  ErrorCodeYear,
	_ErrorCodeName[11:13]: ErrorCodeBr,
	_ErrorCodeName[13:15]: ErrorCodePd,
	_ErrorCodeName[15:19]: ErrorCodeData,
	_ErrorCodeName[19:24]: ErrorCodeOther,
}

// ParseErrorCode converts a string to an ErrorCode.
func ParseErrorCode(value string) (ErrorCode, error) {
	if x, ok := _ErrorCodeNameMap[value]; ok {
		return x, nil
	}
	return ErrorCode(0), fmt.Errorf("%s is %w", value, ErrInvalidErrorCode)
}

var ErrInvalidV = errors.New("not a valid V")

var _VName = "_1997_2007"

var _VMapName = map[V]string{
	V1997: _VName[0:5],
	V2007: _VName[5:10],
}

// Name is the attribute of V.
func (x V) Name() string {
	if v, ok := _VMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("V(%d).Name", x)
}

var _VMapCmdLen = map[V]int{
	V1997: 14,
	V2007: 16,
}

// CmdLen is the attribute of V.
func (x V) CmdLen() int {
	if v, ok := _VMapCmdLen[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of V.
func (x V) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x V) IsValid() bool {
	_, ok := _VMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x V) String() string {
	return x.Name()
}

var _VNameMap = map[string]V{
	_VName[0:5]:  V1997,
	_VName[5:10]: V2007,
}

// ParseV converts a string to a V.
func ParseV(value string) (V, error) {
	if x, ok := _VNameMap[value]; ok {
		return x, nil
	}
	return V(0), fmt.Errorf("%s is %w", value, ErrInvalidV)
}
