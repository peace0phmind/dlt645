// Code generated by https://github.com/expgo/ag DO NOT EDIT.
// Plugins:
//   - github.com/expgo/enum

package dlt645

import (
	"errors"
	"fmt"
)

const (
	// CCodeBrc is a CCode of type BRC.
	CCodeBrc CCode = 8 // 广播校时
	// CCodeRd is a CCode of type RD.
	CCodeRd CCode = 17 // 读数据
	// CCodeRdm is a CCode of type RDM.
	CCodeRdm CCode = 18 // 读后续数据
	// CCodeRda is a CCode of type RDA.
	CCodeRda CCode = 19 // 读通信地址
	// CCodeWr is a CCode of type WR.
	CCodeWr CCode = 20 // 写数据
	// CCodeWra is a CCode of type WRA.
	CCodeWra CCode = 21 // 写通信地址
	// CCodeDj is a CCode of type DJ.
	CCodeDj CCode = 22 // 冻结命令
	// CCodeBr is a CCode of type BR.
	CCodeBr CCode = 23 // 更改通信速率
	// CCodePd is a CCode of type PD.
	CCodePd CCode = 24 // 修改密码
	// CCodeXl is a CCode of type XL.
	CCodeXl CCode = 25 // 最大需量清零
	// CCodeDb is a CCode of type DB.
	CCodeDb CCode = 26 // 电表清零
	// CCodeMsg is a CCode of type MSG.
	CCodeMsg CCode = 27 // 事件清零
	// CCodeRr is a CCode of type RR.
	CCodeRr CCode = 255 // 重读数据
)

const (
	// ErrorCodeRate is an ErrorCode of type RATE.
	ErrorCodeRate ErrorCode = 64 // 费率数超
	// ErrorCodeDay is an ErrorCode of type DAY.
	ErrorCodeDay ErrorCode = 32 // 日时段数超
	// ErrorCodeYear is an ErrorCode of type YEAR.
	ErrorCodeYear ErrorCode = 16 // 年时区数超
	// ErrorCodeBr is an ErrorCode of type BR.
	ErrorCodeBr ErrorCode = 8 // 通信速率不能更改
	// ErrorCodePd is an ErrorCode of type PD.
	ErrorCodePd ErrorCode = 4 // 密码错误/未授权
	// ErrorCodeData is an ErrorCode of type DATA.
	ErrorCodeData ErrorCode = 2 // 无请求数据
	// ErrorCodeOther is an ErrorCode of type OTHER.
	ErrorCodeOther ErrorCode = 1 // 其他错误
)

const (
	// PV1997 is a P of type V1997.
	PV1997 P = iota
	// PV2007 is a P of type V2007.
	PV2007
)

var ErrInvalidCCode = errors.New("not a valid CCode")

var _CCodeName = "BRCRDRDMRDAWRWRADJBRPDXLDBMSGRR"

var _CCodeMapName = map[CCode]string{
	CCodeBrc: _CCodeName[0:3],
	CCodeRd:  _CCodeName[3:5],
	CCodeRdm: _CCodeName[5:8],
	CCodeRda: _CCodeName[8:11],
	CCodeWr:  _CCodeName[11:13],
	CCodeWra: _CCodeName[13:16],
	CCodeDj:  _CCodeName[16:18],
	CCodeBr:  _CCodeName[18:20],
	CCodePd:  _CCodeName[20:22],
	CCodeXl:  _CCodeName[22:24],
	CCodeDb:  _CCodeName[24:26],
	CCodeMsg: _CCodeName[26:29],
	CCodeRr:  _CCodeName[29:31],
}

// Name is the attribute of CCode.
func (x CCode) Name() string {
	if v, ok := _CCodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("CCode(%d).Name", x)
}

var _CCodeMapOld = map[CCode]uint8{
	CCodeBrc: 8,
	CCodeRd:  1,
	CCodeRdm: 2,
	CCodeRda: 255,
	CCodeWr:  4,
	CCodeWra: 10,
	CCodeDj:  255,
	CCodeBr:  12,
	CCodePd:  15,
	CCodeXl:  16,
	CCodeDb:  255,
	CCodeMsg: 255,
	CCodeRr:  3,
}

// Old is the attribute of CCode.
func (x CCode) Old() uint8 {
	if v, ok := _CCodeMapOld[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of CCode.
func (x CCode) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CCode) IsValid() bool {
	_, ok := _CCodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x CCode) String() string {
	return x.Name()
}

var _CCodeNameMap = map[string]CCode{
	_CCodeName[0:3]:   CCodeBrc,
	_CCodeName[3:5]:   CCodeRd,
	_CCodeName[5:8]:   CCodeRdm,
	_CCodeName[8:11]:  CCodeRda,
	_CCodeName[11:13]: CCodeWr,
	_CCodeName[13:16]: CCodeWra,
	_CCodeName[16:18]: CCodeDj,
	_CCodeName[18:20]: CCodeBr,
	_CCodeName[20:22]: CCodePd,
	_CCodeName[22:24]: CCodeXl,
	_CCodeName[24:26]: CCodeDb,
	_CCodeName[26:29]: CCodeMsg,
	_CCodeName[29:31]: CCodeRr,
}

// ParseCCode converts a string to a CCode.
func ParseCCode(value string) (CCode, error) {
	if x, ok := _CCodeNameMap[value]; ok {
		return x, nil
	}
	return CCode(0), fmt.Errorf("%s is %w", value, ErrInvalidCCode)
}

var ErrInvalidErrorCode = errors.New("not a valid ErrorCode")

var _ErrorCodeName = "RATEDAYYEARBRPDDATAOTHER"

var _ErrorCodeMapName = map[ErrorCode]string{
	ErrorCodeRate:  _ErrorCodeName[0:4],
	ErrorCodeDay:   _ErrorCodeName[4:7],
	ErrorCodeYear:  _ErrorCodeName[7:11],
	ErrorCodeBr:    _ErrorCodeName[11:13],
	ErrorCodePd:    _ErrorCodeName[13:15],
	ErrorCodeData:  _ErrorCodeName[15:19],
	ErrorCodeOther: _ErrorCodeName[19:24],
}

// Name is the attribute of ErrorCode.
func (x ErrorCode) Name() string {
	if v, ok := _ErrorCodeMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("ErrorCode(%d).Name", x)
}

var _ErrorCodeMapOld = map[ErrorCode]uint8{
	ErrorCodeRate:  64,
	ErrorCodeDay:   32,
	ErrorCodeYear:  16,
	ErrorCodeBr:    8,
	ErrorCodePd:    4,
	ErrorCodeData:  2,
	ErrorCodeOther: 1,
}

// Old is the attribute of ErrorCode.
func (x ErrorCode) Old() uint8 {
	if v, ok := _ErrorCodeMapOld[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of ErrorCode.
func (x ErrorCode) Val() uint8 {
	return uint8(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ErrorCode) IsValid() bool {
	_, ok := _ErrorCodeMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x ErrorCode) String() string {
	return x.Name()
}

var _ErrorCodeNameMap = map[string]ErrorCode{
	_ErrorCodeName[0:4]:   ErrorCodeRate,
	_ErrorCodeName[4:7]:   ErrorCodeDay,
	_ErrorCodeName[7:11]:  ErrorCodeYear,
	_ErrorCodeName[11:13]: ErrorCodeBr,
	_ErrorCodeName[13:15]: ErrorCodePd,
	_ErrorCodeName[15:19]: ErrorCodeData,
	_ErrorCodeName[19:24]: ErrorCodeOther,
}

// ParseErrorCode converts a string to an ErrorCode.
func ParseErrorCode(value string) (ErrorCode, error) {
	if x, ok := _ErrorCodeNameMap[value]; ok {
		return x, nil
	}
	return ErrorCode(0), fmt.Errorf("%s is %w", value, ErrInvalidErrorCode)
}

var ErrInvalidP = errors.New("not a valid P")

var _PName = "V1997V2007"

var _PMapName = map[P]string{
	PV1997: _PName[0:5],
	PV2007: _PName[5:10],
}

// Name is the attribute of P.
func (x P) Name() string {
	if v, ok := _PMapName[x]; ok {
		return v
	}
	return fmt.Sprintf("P(%d).Name", x)
}

var _PMapCmdLen = map[P]int{
	PV1997: 14,
	PV2007: 16,
}

// CmdLen is the attribute of P.
func (x P) CmdLen() int {
	if v, ok := _PMapCmdLen[x]; ok {
		return v
	}
	return 0
}

// Val is the attribute of P.
func (x P) Val() int {
	return int(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x P) IsValid() bool {
	_, ok := _PMapName[x]
	return ok
}

// String implements the Stringer interface.
func (x P) String() string {
	return x.Name()
}

var _PNameMap = map[string]P{
	_PName[0:5]:  PV1997,
	_PName[5:10]: PV2007,
}

// ParseP converts a string to a P.
func ParseP(value string) (P, error) {
	if x, ok := _PNameMap[value]; ok {
		return x, nil
	}
	return P(0), fmt.Errorf("%s is %w", value, ErrInvalidP)
}
